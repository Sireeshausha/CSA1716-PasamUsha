import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0, cost=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost

    def __lt__(self, other):
        return self.cost < other.cost

def print_solution(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    path.reverse()
    for state in path:
        print_state(state)
        print()

def print_state(state):
    for row in state:
        print(row)
    print()

def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def generate_moves(i, j):
    moves = []
    if i > 0:
        moves.append((-1, 0))  # Move Up
    if i < 2:
        moves.append((1, 0))   # Move Down
    if j > 0:
        moves.append((0, -1))  # Move Left
    if j < 2:
        moves.append((0, 1))   # Move Right
    return moves

def apply_move(state, move):
    i, j = find_blank(state)
    new_state = [row.copy() for row in state]
    x, y = move
    new_state[i][j], new_state[i+x][j+y] = new_state[i+x][j+y], new_state[i][j]
    return new_state

def calculate_manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_row, target_col = divmod(value-1, 3)
                distance += abs(i - target_row) + abs(j - target_col)
    return distance

def solve_puzzle(initial_state):
    initial_node = PuzzleNode(state=initial_state, cost=calculate_manhattan_distance(initial_state))
    heap = [initial_node]

    while heap:
        current_node = heapq.heappop(heap)

        if current_node.state == goal_state:
            print("Solution found!")
            print_solution(current_node)
            return

        i, j = find_blank(current_node.state)
        possible_moves = generate_moves(i, j)

        for move in possible_moves:
            new_state = apply_move(current_node.state, move)
            new_cost = current_node.depth + 1 + calculate_manhattan_distance(new_state)
            new_node = PuzzleNode(state=new_state, parent=current_node, move=move, depth=current_node.depth + 1, cost=new_cost)
            heapq.heappush(heap, new_node)
            
# Example:
initial_state = [
    [1, 2, 3],
    [4, 0, 5],
    [6, 7, 8]
]

goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]


solve_puzzle(initial_state)

